// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model SuperAdmin {
  id    String  @id @unique @default(cuid())
  name  String?
  email String  @unique
  token String?
}

enum Role {
  EMPLEADO
  ADMIN
}

model User {
  id           String         @id @unique @default(cuid())
  firstName    String?
  lastName     String?
  email        String         @unique
  role         Role           @default(EMPLEADO)
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  isValidated  Boolean        @default(false)
  isActive     Boolean        @default(true)
  Review       Review[]
  token        String?
  CreditAssign CreditAssign[]

  @@index([companyId])
}

model Company {
  id        String   @id @unique @default(cuid())
  name      String
  employees User[]
  email     String
  Wallet    Wallet[]
}

model Wallet {
  id           String         @id @unique @default(cuid())
  Company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String         @unique
  credits      Int            @default(0)
  CreditAssign CreditAssign[]

  @@index([companyId])
}

model CreditAssign {
  id       String @id @unique @default(cuid())
  ammount  Int
  Wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId String
  userId   String

  @@index([walletId])
  @@index([userId])
}

model Address {
  id         String   @id @unique @default(cuid())
  country    String
  city       String
  streetName String
  number     String
  floor      String?
  apartment  String?
  postalCode String?
  Cowork     Cowork[]
}

enum Status {
  ACTIVE
  PAUSED
  CLOSED
}

model OpenSchedule {
  id     String   @id @unique @default(cuid())
  mon    String?
  tue    String?
  wed    String?
  thu    String?
  fri    String?
  sat    String?
  sun    String?
  Cowork Cowork[]
}

// TODO: expand / check specificity
model CoworkAmenities {
  id        String   @id @unique @default(cuid())
  wifi      Boolean?
  bathrooms Int?
  buffet    Boolean?
  Cowork    Cowork[]
}

model Cowork {
  id             String           @id @unique @default(cuid())
  address        Address          @relation(fields: [addressId], references: [id])
  addressId      String           @unique
  name           String           @unique
  email          String
  description    String
  status         Status           @default(ACTIVE)
  phone          String
  openSchedule   OpenSchedule?    @relation(fields: [openScheduleId], references: [id])
  amenities      CoworkAmenities? @relation(fields: [amenitiesId], references: [id])
  rating         Float            @default(0.0)
  Space          Space[]
  Review         Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  updatedBy      String
  openScheduleId String?          @unique
  amenitiesId    String?          @unique

  @@index([addressId])
  @@index([openScheduleId])
  @@index([amenitiesId])
}

// TODO: expand / check specificity
model SpaceAmenities {
  id     String  @id @unique @default(cuid())
  chairs Int
  size   String
  Space  Space[]
}

// TODO: model availability & shape schema for spaces
model Space {
  id               String         @id @unique @default(cuid())
  cowork           Cowork         @relation(fields: [coworkId], references: [id])
  coworkId         String
  capacity         Int
  price            Float
  amenities        SpaceAmenities @relation(fields: [spaceAmenitiesId], references: [id])
  // availability                 // <-- maybe a JSON?
  // shape                      // <-- url? JSON?
  Review           Review[]
  spaceAmenitiesId String

  @@index([coworkId])
  @@index([spaceAmenitiesId])
}

model Review {
  id       String  @id @unique @default(cuid())
  Cowork   Cowork  @relation(fields: [coworkId], references: [id])
  coworkId String
  Space    Space   @relation(fields: [spaceId], references: [id])
  spaceId  String
  Author   User    @relation(fields: [authorId], references: [id])
  authorId String
  rating   Float
  comment  String?

  @@index([coworkId])
  @@index([spaceId])
  @@index([authorId])
}
